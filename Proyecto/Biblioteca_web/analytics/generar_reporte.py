#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Generador de Reporte Completo del Sistema de Biblioteca
Genera estad√≠sticas detalladas de l√≠neas de c√≥digo por archivo y categor√≠a
"""

import os
import glob
from datetime import datetime

def contar_lineas_archivo(archivo):
    """Cuenta las l√≠neas totales y de c√≥digo de un archivo"""
    try:
        with open(archivo, 'r', encoding='utf-8') as f:
            lines = f.readlines()
            total = len(lines)
            empty = sum(1 for line in lines if line.strip() == '')
            return total, total - empty
    except:
        try:
            with open(archivo, 'r', encoding='latin-1') as f:
                lines = f.readlines()
                total = len(lines)
                empty = sum(1 for line in lines if line.strip() == '')
                return total, total - empty
        except Exception as e:
            print(f"Error leyendo {archivo}: {e}")
            return 0, 0

def get_file_size(archivo):
    """Obtiene el tama√±o de un archivo en bytes"""
    try:
        return os.path.getsize(archivo)
    except:
        return 0

def main():
    print('='*80)
    print('üìã REPORTE COMPLETO DEL SISTEMA DE BIBLIOTECA')
    fecha_actual = datetime.now().strftime("%d/%m/%Y %H:%M:%S")
    print(f'üìÖ Fecha: {fecha_actual}')
    print('='*80)

    # Definir categor√≠as de archivos
    categorias = {
        'üêç BACKEND PYTHON': {
            'patrones': ['*.py'],
            'descripcion': 'L√≥gica de negocio y servidor Flask',
            'excluir': set(['generar_reporte.py'])  # Excluir este mismo archivo
        },
        'üåê TEMPLATES HTML': {
            'patrones': ['templates/*.html'],
            'descripcion': 'Interfaz de usuario y vistas',
            'excluir': set()
        },
        '‚ö° JAVASCRIPT': {
            'patrones': ['static/*.js'],
            'descripcion': 'Funcionalidad del lado cliente',
            'excluir': set()
        },
        'üé® ESTILOS CSS': {
            'patrones': ['static/*.css'],
            'descripcion': 'Dise√±o y presentaci√≥n visual',
            'excluir': set()
        },
        'üìä ARCHIVOS DE PRUEBA': {
            'patrones': ['test_*.py', 'verificar_*.py'],
            'descripcion': 'Scripts de testing y verificaci√≥n',
            'excluir': set()
        },
        '‚öôÔ∏è UTILIDADES': {
            'patrones': ['insertar_*.py', 'ajustar_*.py', 'contador_*.py', 'reporte_*.py'],
            'descripcion': 'Scripts auxiliares y herramientas',
            'excluir': set(['generar_reporte.py'])
        }
    }

    total_archivos = 0
    total_lineas = 0
    total_lineas_codigo = 0
    total_tama√±o = 0
    detalle_por_categoria = {}

    for categoria, info in categorias.items():
        archivos_encontrados = []
        for patron in info['patrones']:
            archivos_encontrados.extend(glob.glob(patron))
        
        # Filtrar archivos excluidos
        archivos_encontrados = [f for f in archivos_encontrados 
                               if os.path.basename(f) not in info['excluir']]
        
        if archivos_encontrados:
            print(f'\n{categoria}')
            print(f'üìù {info["descripcion"]}')
            print('-'*70)
            
            subtotal_lineas = 0
            subtotal_codigo = 0
            subtotal_tama√±o = 0
            archivos_detalle = []
            
            for archivo in sorted(archivos_encontrados):
                if os.path.isfile(archivo):
                    lineas_total, lineas_codigo = contar_lineas_archivo(archivo)
                    tama√±o = get_file_size(archivo)
                    
                    subtotal_lineas += lineas_total
                    subtotal_codigo += lineas_codigo
                    subtotal_tama√±o += tama√±o
                    
                    tama√±o_kb = tama√±o / 1024
                    nombre = os.path.basename(archivo)
                    archivos_detalle.append({
                        'nombre': nombre,
                        'lineas': lineas_total,
                        'codigo': lineas_codigo,
                        'tama√±o_kb': tama√±o_kb
                    })
                    
                    print(f'  üìÑ {nombre:<35} {lineas_total:>5} l√≠neas ({lineas_codigo:>4} c√≥digo) {tama√±o_kb:>6.1f} KB')
            
            print(f'  üìä SUBTOTAL: {len(archivos_encontrados)} archivos, {subtotal_lineas} l√≠neas, {subtotal_tama√±o/1024:.1f} KB')
            
            detalle_por_categoria[categoria] = {
                'archivos': len(archivos_encontrados),
                'lineas': subtotal_lineas,
                'codigo': subtotal_codigo,
                'tama√±o_kb': subtotal_tama√±o/1024,
                'detalle': archivos_detalle
            }
            
            total_archivos += len(archivos_encontrados)
            total_lineas += subtotal_lineas
            total_lineas_codigo += subtotal_codigo
            total_tama√±o += subtotal_tama√±o

    print(f'\n{"="*80}')
    print('üìà RESUMEN ESTAD√çSTICO FINAL')
    print(f'{"="*80}')
    print(f'üìÅ Total de archivos analizados:    {total_archivos:>6}')
    print(f'üìÑ Total de l√≠neas:                 {total_lineas:>6}')
    print(f'üíª L√≠neas de c√≥digo (sin vac√≠as):   {total_lineas_codigo:>6}')
    print(f'üíæ Tama√±o total del proyecto:       {total_tama√±o/1024:>6.1f} KB')
    print(f'üìä Promedio l√≠neas por archivo:     {total_lineas/total_archivos if total_archivos > 0 else 0:.1f}')
    print(f'{"="*80}')
    
    # Generar distribuci√≥n porcentual
    print('\nüìä DISTRIBUCI√ìN PORCENTUAL POR CATEGOR√çA:')
    print('-'*50)
    for categoria, datos in detalle_por_categoria.items():
        porcentaje = (datos['lineas'] / total_lineas * 100) if total_lineas > 0 else 0
        print(f'{categoria:<25} {datos["lineas"]:>6} l√≠neas ({porcentaje:>5.1f}%)')
    
    # Archivos m√°s grandes
    print('\nüìà TOP 5 ARCHIVOS M√ÅS GRANDES (por l√≠neas):')
    print('-'*50)
    todos_archivos = []
    for categoria, datos in detalle_por_categoria.items():
        for archivo in datos['detalle']:
            todos_archivos.append((archivo['nombre'], archivo['lineas'], categoria))
    
    todos_archivos.sort(key=lambda x: x[1], reverse=True)
    for i, (nombre, lineas, categoria) in enumerate(todos_archivos[:5], 1):
        print(f'{i}. {nombre:<35} {lineas:>5} l√≠neas ({categoria})')

if __name__ == "__main__":
    main()